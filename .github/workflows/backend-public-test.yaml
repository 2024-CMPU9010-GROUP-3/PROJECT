name: Public Backend Tests

on:
  pull_request:
    paths:
      - "Backend/**"

jobs:
  lint-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Lint the code
        uses: golangci/golangci-lint-action@v6
        with:
          working-directory: Backend
          version: v1.60
          args: --build-tags public

  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
        
      - name: Extract package version
        id: get_version
        run: |
          VERSION=$(cat Backend/.version | tr -d '\n' | tr -d '\r')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up test result converter
        run: go install github.com/ctrf-io/go-ctrf-json-reporter/cmd/go-ctrf-json-reporter@latest

      - name: Run unit tests
        working-directory: ./Backend
        run: go test -tags=public -coverprofile=../TestCoverage-public.out -json ./... > ../TestResults-public.json

      - name: Convert test results to CTRF
        if: always()
        run: cat TestResults-public.json | go-ctrf-json-reporter -appName "Magpie Public Backend" -appVersion ${{ env.VERSION }} -output TestResults-public.json

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults-public
          path: TestResults-public.json

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestCoverage-public
          path: TestCoverage-public.out
  
  test-results-check:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: always()
    permissions:
      contents:      read
      actions:       read
      pull-requests: write
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: TestResults-public

      - name: Download test coverage results
        uses: actions/download-artifact@v4
        with:
          name: TestCoverage-public

      - name: Check coverage
        id: check_coverage
        working-directory: ./Backend
        run: |
          coverage=$(go tool cover -func=../TestCoverage-public.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "total_coverage=$coverage" >> $GITHUB_OUTPUT
          echo "Coverage: $coverage%"

      - name: Post comment on the PR with test coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          COVERAGE=${{ steps.check_coverage.outputs.total_coverage }}
          COMMENT_BODY="Test Coverage (public): $COVERAGE%"
          gh issue comment ${{ env.PR_NUMBER }} --body "$COMMENT_BODY"
      
      - name: Fail if coverage is below threshold
        run: |
          COVERAGE="${{ steps.check_coverage.outputs.total_coverage }}"
          if (( $(echo "$COVERAGE < 75" | bc -l) )); then
            echo "Coverage ($COVERAGE%) is below the threshold (75%)"
            exit 1
          fi

      - name: Report test results
        run: npx github-actions-ctrf TestResults-public.json --pr-comment --title "Test Results (public)"
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-check:
    needs: lint-check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for arm64 and amd64
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t backend-public-test-image -f ./Backend/Dockerfile.public ./Backend
