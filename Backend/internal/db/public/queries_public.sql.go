//go:build public

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries_public.sql

package db

import (
	"context"

	"github.com/cridenour/go-postgis"
	"github.com/jackc/pgx/v5/pgtype"
)

const getPointByRadius = `-- name: GetPointByRadius :one
SELECT Id, LongLat, Type FROM points
WHERE ST_Contains(
  ST_MakeEnvelope(
    ST_X($1::GEOMETRY) - $2::DECIMAL,
    ST_Y($1::GEOMETRY) - $2::DECIMAL,
    ST_X($1::GEOMETRY) + $2::DECIMAL,
    ST_Y($1::GEOMETRY) + $2::DECIMAL,
    ST_SRID($1::GEOMETRY)
  ), points.LongLat
)
`

type GetPointByRadiusParams struct {
	Column1 postgis.Point  `json:"column_1"`
	Column2 pgtype.Numeric `json:"column_2"`
}

type GetPointByRadiusRow struct {
	ID      int64         `json:"id"`
	Longlat postgis.Point `json:"longlat"`
	Type    NullPointType `json:"type"`
}

func (q *Queries) GetPointByRadius(ctx context.Context, arg GetPointByRadiusParams) (GetPointByRadiusRow, error) {
	row := q.db.QueryRow(ctx, getPointByRadius, arg.Column1, arg.Column2)
	var i GetPointByRadiusRow
	err := row.Scan(&i.ID, &i.Longlat, &i.Type)
	return i, err
}

const getPointDetails = `-- name: GetPointDetails :one
SELECT Details FROM points
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPointDetails(ctx context.Context, id int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getPointDetails, id)
	var details []byte
	err := row.Scan(&details)
	return details, err
}
