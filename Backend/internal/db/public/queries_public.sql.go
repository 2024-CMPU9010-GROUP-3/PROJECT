//go:build public

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries_public.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	geos "github.com/twpayne/go-geos"
)

const getPointDetails = `-- name: GetPointDetails :one
SELECT Details::jsonb FROM points
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPointDetails(ctx context.Context, id int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getPointDetails, id)
	var details []byte
	err := row.Scan(&details)
	return details, err
}

const getPointsInEnvelope = `-- name: GetPointsInEnvelope :many
SELECT Id, LongLat::geometry, Type FROM points
WHERE ST_Intersects(ST_MakeEnvelope($1::float, $2::float, $3::float, $4::float, 4326), points.LongLat)
`

type GetPointsInEnvelopeParams struct {
	X1 float64 `json:"x1"`
	Y1 float64 `json:"y1"`
	X2 float64 `json:"x2"`
	Y2 float64 `json:"y2"`
}

type GetPointsInEnvelopeRow struct {
	ID      int64      `json:"id"`
	Longlat *geos.Geom `json:"longlat"`
	Type    PointType  `json:"type"`
}

func (q *Queries) GetPointsInEnvelope(ctx context.Context, arg GetPointsInEnvelopeParams) ([]GetPointsInEnvelopeRow, error) {
	rows, err := q.db.Query(ctx, getPointsInEnvelope,
		arg.X1,
		arg.Y1,
		arg.X2,
		arg.Y2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPointsInEnvelopeRow
	for rows.Next() {
		var i GetPointsInEnvelopeRow
		if err := rows.Scan(&i.ID, &i.Longlat, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDetails = `-- name: GetUserDetails :one
SELECT Id, RegisterDate, FirstName, LastName, ProfilePicture, LastLoggedIn
FROM user_details
WHERE Id = $1
LIMIT 1
`

func (q *Queries) GetUserDetails(ctx context.Context, id pgtype.UUID) (UserDetail, error) {
	row := q.db.QueryRow(ctx, getUserDetails, id)
	var i UserDetail
	err := row.Scan(
		&i.ID,
		&i.Registerdate,
		&i.Firstname,
		&i.Lastname,
		&i.Profilepicture,
		&i.Lastloggedin,
	)
	return i, err
}
