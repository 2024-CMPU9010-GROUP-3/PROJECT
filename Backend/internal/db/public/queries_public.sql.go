//go:build public

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries_public.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	go_geom "github.com/twpayne/go-geom"
)

const createLocationHistoryEntry = `-- name: CreateLocationHistoryEntry :one
INSERT INTO location_history (UserId, AmenityTypes, LongLat, Radius, DisplayName) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING Id
`

type CreateLocationHistoryEntryParams struct {
	Userid       pgtype.UUID    `json:"userid"`
	Amenitytypes []PointType    `json:"amenitytypes"`
	Longlat      *go_geom.Point `json:"longlat"`
	Radius       int32          `json:"radius"`
	Displayname  pgtype.Text    `json:"displayname"`
}

func (q *Queries) CreateLocationHistoryEntry(ctx context.Context, arg CreateLocationHistoryEntryParams) (int64, error) {
	row := q.db.QueryRow(ctx, createLocationHistoryEntry,
		arg.Userid,
		arg.Amenitytypes,
		arg.Longlat,
		arg.Radius,
		arg.Displayname,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO logins (
  Username, Email, PasswordHash
) VALUES (
  $1, $2, $3
) RETURNING Id
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	Passwordhash string `json:"passwordhash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.Passwordhash)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const createUserDetails = `-- name: CreateUserDetails :one
INSERT INTO user_details (
  Id, FirstName, LastName, ProfilePicture
) VALUES (
  $1, $2, $3, $4
) RETURNING Id
`

type CreateUserDetailsParams struct {
	ID             pgtype.UUID `json:"id"`
	Firstname      string      `json:"firstname"`
	Lastname       string      `json:"lastname"`
	Profilepicture pgtype.Text `json:"profilepicture"`
}

func (q *Queries) CreateUserDetails(ctx context.Context, arg CreateUserDetailsParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUserDetails,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Profilepicture,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteLocationHistoryEntries = `-- name: DeleteLocationHistoryEntries :exec
DELETE FROM location_history WHERE Id = ANY($1::BIGINT[])
`

func (q *Queries) DeleteLocationHistoryEntries(ctx context.Context, ids []int64) error {
	_, err := q.db.Exec(ctx, deleteLocationHistoryEntries, ids)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM logins WHERE Id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const emailExists = `-- name: EmailExists :one
SELECT EXISTS(
  SELECT 1 FROM logins WHERE Email = $1 AND Id IS DISTINCT FROM $2
) AS "exists"
`

type EmailExistsParams struct {
	Email string      `json:"email"`
	ID    pgtype.UUID `json:"id"`
}

func (q *Queries) EmailExists(ctx context.Context, arg EmailExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, emailExists, arg.Email, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getLocationHistory = `-- name: GetLocationHistory :many
SELECT Id, DateCreated, AmenityTypes, LongLat, Radius, DisplayName
FROM location_history
WHERE UserId = $1
ORDER BY Id ASC
`

type GetLocationHistoryRow struct {
	ID           int64            `json:"id"`
	Datecreated  pgtype.Timestamp `json:"datecreated"`
	Amenitytypes []PointType      `json:"amenitytypes"`
	Longlat      *go_geom.Point   `json:"longlat"`
	Radius       int32            `json:"radius"`
	Displayname  pgtype.Text      `json:"displayname"`
}

func (q *Queries) GetLocationHistory(ctx context.Context, userid pgtype.UUID) ([]GetLocationHistoryRow, error) {
	rows, err := q.db.Query(ctx, getLocationHistory, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLocationHistoryRow
	for rows.Next() {
		var i GetLocationHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Datecreated,
			&i.Amenitytypes,
			&i.Longlat,
			&i.Radius,
			&i.Displayname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLoginByEmail = `-- name: GetLoginByEmail :one
SELECT Id, Username, Email, PasswordHash
FROM logins
WHERE Email = $1
LIMIT 1
`

func (q *Queries) GetLoginByEmail(ctx context.Context, email string) (Login, error) {
	row := q.db.QueryRow(ctx, getLoginByEmail, email)
	var i Login
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const getLoginById = `-- name: GetLoginById :one
SELECT Id, Username, Email, PasswordHash
FROM logins
WHERE Id = $1
LIMIT 1
`

func (q *Queries) GetLoginById(ctx context.Context, id pgtype.UUID) (Login, error) {
	row := q.db.QueryRow(ctx, getLoginById, id)
	var i Login
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const getLoginByUsername = `-- name: GetLoginByUsername :one
SELECT Id, Username, Email, PasswordHash
FROM logins
WHERE Username = $1
LIMIT 1
`

func (q *Queries) GetLoginByUsername(ctx context.Context, username string) (Login, error) {
	row := q.db.QueryRow(ctx, getLoginByUsername, username)
	var i Login
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const getPointDetails = `-- name: GetPointDetails :one
SELECT Details::jsonb FROM points
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPointDetails(ctx context.Context, id int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getPointDetails, id)
	var details []byte
	err := row.Scan(&details)
	return details, err
}

const getPointsInEnvelope = `-- name: GetPointsInEnvelope :many
SELECT Id, LongLat::geometry, Type FROM points
WHERE ST_Intersects(ST_MakeEnvelope($1::float, $2::float, $3::float, $4::float, 4326), points.LongLat)
`

type GetPointsInEnvelopeParams struct {
	X1 float64 `json:"x1"`
	Y1 float64 `json:"y1"`
	X2 float64 `json:"x2"`
	Y2 float64 `json:"y2"`
}

type GetPointsInEnvelopeRow struct {
	ID      int64          `json:"id"`
	Longlat *go_geom.Point `json:"longlat"`
	Type    PointType      `json:"type"`
}

func (q *Queries) GetPointsInEnvelope(ctx context.Context, arg GetPointsInEnvelopeParams) ([]GetPointsInEnvelopeRow, error) {
	rows, err := q.db.Query(ctx, getPointsInEnvelope,
		arg.X1,
		arg.Y1,
		arg.X2,
		arg.Y2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPointsInEnvelopeRow
	for rows.Next() {
		var i GetPointsInEnvelopeRow
		if err := rows.Scan(&i.ID, &i.Longlat, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPointsInRadius = `-- name: GetPointsInRadius :many
SELECT Id, LongLat::geometry, Type from points
WHERE ST_DWithin(
  LongLat::geography,
  ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326)::geography,
  $3::float
) AND (
  $4::point_type[] IS NULL OR Type = ANY($4::point_type[])
)
`

type GetPointsInRadiusParams struct {
	Longitude float64     `json:"longitude"`
	Latitude  float64     `json:"latitude"`
	Radius    float64     `json:"radius"`
	Types     []PointType `json:"types"`
}

type GetPointsInRadiusRow struct {
	ID      int64          `json:"id"`
	Longlat *go_geom.Point `json:"longlat"`
	Type    PointType      `json:"type"`
}

func (q *Queries) GetPointsInRadius(ctx context.Context, arg GetPointsInRadiusParams) ([]GetPointsInRadiusRow, error) {
	rows, err := q.db.Query(ctx, getPointsInRadius,
		arg.Longitude,
		arg.Latitude,
		arg.Radius,
		arg.Types,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPointsInRadiusRow
	for rows.Next() {
		var i GetPointsInRadiusRow
		if err := rows.Scan(&i.ID, &i.Longlat, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDetails = `-- name: GetUserDetails :one
SELECT Id, RegisterDate, FirstName, LastName, ProfilePicture, LastLoggedIn
FROM user_details
WHERE Id = $1
LIMIT 1
`

func (q *Queries) GetUserDetails(ctx context.Context, id pgtype.UUID) (UserDetail, error) {
	row := q.db.QueryRow(ctx, getUserDetails, id)
	var i UserDetail
	err := row.Scan(
		&i.ID,
		&i.Registerdate,
		&i.Firstname,
		&i.Lastname,
		&i.Profilepicture,
		&i.Lastloggedin,
	)
	return i, err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE user_details
SET LastLoggedIn = (NOW() AT TIME ZONE 'utc')
WHERE Id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}

const updateLogin = `-- name: UpdateLogin :exec
UPDATE logins
SET 
  Username = $2,
  Email = $3,
  PasswordHash = $4
WHERE Id = $1
`

type UpdateLoginParams struct {
	ID           pgtype.UUID `json:"id"`
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	Passwordhash string      `json:"passwordhash"`
}

func (q *Queries) UpdateLogin(ctx context.Context, arg UpdateLoginParams) error {
	_, err := q.db.Exec(ctx, updateLogin,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Passwordhash,
	)
	return err
}

const updateUserDetails = `-- name: UpdateUserDetails :exec
UPDATE user_details
SET
  FirstName = $2,
  LastName = $3,
  ProfilePicture = $4::TEXT
WHERE Id = $1
`

type UpdateUserDetailsParams struct {
	ID             pgtype.UUID `json:"id"`
	Firstname      string      `json:"firstname"`
	Lastname       string      `json:"lastname"`
	Profilepicture string      `json:"profilepicture"`
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) error {
	_, err := q.db.Exec(ctx, updateUserDetails,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Profilepicture,
	)
	return err
}

const usernameExists = `-- name: UsernameExists :one
SELECT EXISTS(
  SELECT 1 FROM logins WHERE Username = $1 AND Id IS DISTINCT FROM $2
) AS "exists"
`

type UsernameExistsParams struct {
	Username string      `json:"username"`
	ID       pgtype.UUID `json:"id"`
}

func (q *Queries) UsernameExists(ctx context.Context, arg UsernameExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, usernameExists, arg.Username, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
