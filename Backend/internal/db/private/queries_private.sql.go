//go:build private

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries_private.sql

package db

import (
	"context"

	"github.com/cridenour/go-postgis"
)

const createPoint = `-- name: CreatePoint :one
INSERT INTO points (
  LongLat, Type, Details
) VALUES (
  $1, $2, $3
) RETURNING Id
`

type CreatePointParams struct {
	Longlat postgis.Point `json:"longlat"`
	Type    NullPointType `json:"type"`
	Details []byte        `json:"details"`
}

func (q *Queries) CreatePoint(ctx context.Context, arg CreatePointParams) (int64, error) {
	row := q.db.QueryRow(ctx, createPoint, arg.Longlat, arg.Type, arg.Details)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deletePoint = `-- name: DeletePoint :exec
DELETE FROM points
WHERE id = $1
`

func (q *Queries) DeletePoint(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePoint, id)
	return err
}

const getPoint = `-- name: GetPoint :one
SELECT id, longlat, type, details FROM points
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPoint(ctx context.Context, id int64) (Point, error) {
	row := q.db.QueryRow(ctx, getPoint, id)
	var i Point
	err := row.Scan(
		&i.ID,
		&i.Longlat,
		&i.Type,
		&i.Details,
	)
	return i, err
}

const updatePoint = `-- name: UpdatePoint :exec
UPDATE points
SET LongLat = $2,
Type = $3,
Details = $4
WHERE Id = $1
`

type UpdatePointParams struct {
	ID      int64         `json:"id"`
	Longlat postgis.Point `json:"longlat"`
	Type    NullPointType `json:"type"`
	Details []byte        `json:"details"`
}

func (q *Queries) UpdatePoint(ctx context.Context, arg UpdatePointParams) error {
	_, err := q.db.Exec(ctx, updatePoint,
		arg.ID,
		arg.Longlat,
		arg.Type,
		arg.Details,
	)
	return err
}
